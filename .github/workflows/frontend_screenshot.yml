name: Screenshots CI Action

on:
  workflow_dispatch:
    inputs:
      start:
        description: 'Write anything to start the workflow'
        required: true
        default: ''
  workflow_run:
    workflows: ["GH-Pages Publish"]
    types:
      - completed

jobs:
  start:
    runs-on: ubuntu-latest
    steps:
      - name: Confirm Workflow Start
        run: echo "Screenshots CI Action workflow started"

  screenshots:
    runs-on: ubuntu-latest
    needs: start  # Dependent on the dummy job

    strategy:
      matrix:
        screen: [
            'housing', 
            'foodoffers', 
            'map',
            'accountbalance',
            'campus',
            'news',
            'course-timetable',
            'settings',
            'settings/eatinghabits',
            'settings/pricing',
            'data-access',
            'login'
        ]
        device: [
          { name: 'iphone-6.7', width: 428, height: 926, deviceScaleFactor: 3 },
          { name: 'iphone-5.5', width: 414, height: 736, deviceScaleFactor: 3 },
          { name: 'ipad-13', width: 2064/2, height: 2752/2, deviceScaleFactor: 2 },
          { name: 'ipad-12.9', width: 2048/2, height: 2732/2, deviceScaleFactor: 2 }
        ]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install System Dependencies for Sharp
        run: sudo apt-get update && sudo apt-get install -y libvips-dev

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Node.js Dependencies
        run: npm install puppeteer sharp

      - name: Create Screenshots Directory
        run: mkdir -p screenshots

      - name: Generate and Compress Screenshot for ${{ matrix.screen }} on ${{ matrix.device.name }}
        run: |
          node <<EOF
          const puppeteer = require('puppeteer');
          const sharp = require('sharp');
          const fs = require('fs');

          const url = 'https://' + '${{ github.repository_owner }}' + '.github.io/' + '${{ github.event.repository.name }}' + '/' + '${{ matrix.screen }}' + '?kiosk_mode=true&deviceMock=iphone';
          
          const device = {
            name: '${{ matrix.device.name }}',
            width: ${matrix.device.width},
            height: ${matrix.device.height},
            deviceScaleFactor: ${matrix.device.deviceScaleFactor}
          };

          async function captureAndCompressScreenshot(url, device) {
            const browser = await puppeteer.launch();
            const page = await browser.newPage();

            // Set the German locale, timezone, and geolocation
            await page.setExtraHTTPHeaders({
              'Accept-Language': 'de-DE'
            });
            await page.emulateTimezone('Europe/Berlin');
            await page.setGeolocation({ latitude: 51.1657, longitude: 10.4515 }); // Coordinates for Germany
            await page.setUserAgent('Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Mobile/15E148 Safari/604.1');

            await page.setViewport({
              width: device.width,
              height: device.height,
              deviceScaleFactor: device.deviceScaleFactor,
            });
            console.log(`Navigating to ${url} on device ${device.name} with German settings`);
            await page.goto(url);
            await page.waitForNetworkIdle();
            await new Promise(resolve => setTimeout(resolve, 5000)); // Pause for 5 seconds
            const screenshotPath = 'screenshots/'+url.replace(/https?:\/\/|\/|\?/g, '_')+'_'+device.name+'.png';
            await page.screenshot({ path: screenshotPath });
            console.log(`Saved screenshot: ${screenshotPath}`);
            await browser.close();

            // Compress the screenshot using sharp
            const compressedScreenshotPath = screenshotPath.replace('.png', '_compressed.png');
            await sharp(screenshotPath)
              .png({ quality: 70 }) // Adjust quality as needed
              .toFile(compressedScreenshotPath);
            console.log(`Compressed screenshot saved: ${compressedScreenshotPath}`);

            // Remove the original uncompressed screenshot
            fs.unlinkSync(screenshotPath);
          }

          (async () => {
            await captureAndCompressScreenshot(url, device);
          })();
          EOF

      - name: Upload Compressed Screenshots
        uses: actions/upload-artifact@v2
        with:
          path: screenshots
          name: ${{ github.event.repository.name }}-screenshots

      - name: Prevent Triggering Another Workflow
        if: github.event_name == 'workflow_run'
        run: |
          echo "Skipping CI run for screenshot upload"
          git update-index --skip-worktree screenshots/