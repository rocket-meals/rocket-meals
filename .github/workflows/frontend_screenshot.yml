name: Screenshots CI Action

on:
  workflow_dispatch:
    inputs:
      start:
        description: 'Write anything to start the workflow'
        required: true
        default: ''
  workflow_run:
    workflows: ["GH-Pages Publish"]
    types:
      - completed

jobs:
  start:
    runs-on: ubuntu-latest
    steps:
      - name: Confirm Workflow Start
        run: echo "Screenshots CI Action workflow started"

  screenshots:
    runs-on: ubuntu-latest
    needs: start  # Dependent on the dummy job

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Dependencies
        run: npm install puppeteer

      - name: Generate Screenshots
        run: |
          node <<EOF
          const puppeteer = require('puppeteer');

          const urls = [
            'https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/housing?kiosk_mode=true&deviceMock=iphone',
            // Add more URLs here if needed
          ];

          const devices = [
            { name: 'iphone-6.7', width: 1290, height: 2796, deviceScaleFactor: 2 },
            { name: 'iphone-5.5', width: 1242, height: 2208, deviceScaleFactor: 2 },
            { name: 'ipad-13', width: 2064, height: 2752, deviceScaleFactor: 2 },
            { name: 'ipad-12.9', width: 2048, height: 2732, deviceScaleFactor: 2 },
          ];

          (async () => {
            const browser = await puppeteer.launch();
            const page = await browser.newPage();

            for (const url of urls) {
              for (const device of devices) {
                await page.setViewport({
                  width: device.width,
                  height: device.height,
                  deviceScaleFactor: device.deviceScaleFactor,
                });
                await page.goto(url);
                await page.waitForTimeout(5000);
                const fileName = `screenshots/${url.replace(/https?:\/\/|\/|\?/g, '_')}-${device.name}.png`;
                await page.screenshot({ path: fileName });
                console.log(`Saved screenshot: ${fileName}`);
              }
            }

            await browser.close();
          })();
          EOF
      

      - name: Upload Screenshots
        uses: actions/upload-artifact@v2
        with:
          path: screenshots
          name: ${{ github.event.repository.name }}-screenshots

      - name: Prevent Triggering Another Workflow
        if: github.event_name == 'workflow_run'
        run: |
          echo "Skipping CI run for screenshot upload"
          git update-index --skip-worktree screenshots/
